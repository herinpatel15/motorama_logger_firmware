#include "arduino_secrets.h"
#include <WiFiManager.h>
#include <strings_en.h>
#include <wm_consts_en.h>
#include <wm_strings_en.h>
#include <wm_strings_es.h>
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/e62b8656-da42-4e9c-8948-fd3dd7e76fbe 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float air_Flow_Volume;
  float area;
  float current;
  float energy;
  float humidity;
  float operatioanl_time;
  float pF;
  float power;
  float temperature;
  float windspeed;
  int rpm;
  int voltage;

 
  float current;
  int voltage;
  float energy;
  float pF;
  float power;
  
  float operatioanl_time;
 
  float humidity;
  float temperature;
  
  float windspeed;
  int rpm;
  
  float area;
  float air_Flow_Volume;
  
  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Wire.h>
#include <SPI.h>
#include "Pzem.h"
#include "Temperature_humidity.h"
// #include "Rpm.h"
#include "Rtc.h"
#include "Sd_card.h"
#include <WiFi.h>
#include <WebServer.h>
#include <DNSServer.h>
#include <SPIFFS.h>

const char* AP_SSID = "EnergyMonitor_AP";  // Access Point name
const char* AP_PASSWORD = "12345678";       // Access Point password
const byte DNS_PORT = 53;
IPAddress apIP(192, 168, 4, 1);
DNSServer dnsServer;
WebServer webServer(80);

// Variables to store credentials
String ssid;
String password;

unsigned long lastTime_log = 0;
unsigned long lastOperationalCheck = 0;
unsigned long operationalSeconds = 0;
TaskHandle_t rpmTaskHandle = NULL;
float temp_cfm =0;

// herin change 
float inlet_area = 96.87;

// HTML page for WiFi configuration
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
    <title>Energy Monitor WiFi Setup</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: #f0f0f0;
        }
        .container {
            max-width: 400px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
        .input-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            color: #666;
        }
        input[type="text"],
        input[type="password"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        button {
            background: #4CAF50;
            color: white;
            padding: 12px 20px;
            border: none;
            border-radius: 4px;
            width: 100%;
            cursor: pointer;
            font-size: 16px;
        }
        button:hover {
            background: #45a049;
        }
        .status {
            text-align: center;
            margin-top: 20px;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Energy Monitor Setup</h1>
        <form action="/save" method="POST">
            <div class="input-group">
                <label for="ssid">WiFi Network Name:</label>
                <input type="text" id="ssid" name="ssid" required>
            </div>
            <div class="input-group">
                <label for="password">WiFi Password:</label>
                <input type="password" id="password" name="password" required>
            </div>
            <button type="submit">Connect</button>
        </form>
        <div class="status" id="status"></div>
    </div>
</body>
</html>
)rawliteral";

void handleRoot() {
  webServer.send(200, "text/html", index_html);
}

void handleSave() {
  if (webServer.method() != HTTP_POST) {
    webServer.send(405, "text/plain", "Method Not Allowed");
    return;
  }

  ssid = webServer.arg("ssid");
  password = webServer.arg("password");

  // Send success response
  webServer.send(200, "text/html", "Credentials saved. ESP will now connect to your WiFi network.");
  
  delay(2000);

  // Try to connect to the new WiFi network
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid.c_str(), password.c_str());

  // Wait for connection
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    attempts++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nConnected to WiFi");
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());
    
    // Save credentials to SPIFFS
    saveCredentials();
  } else {
    Serial.println("\nFailed to connect. Starting AP mode again.");
    startAPMode();
  }
}

void saveCredentials() {
  File file = SPIFFS.open("/wifi_cred.txt", "w");
  if (!file) {
    Serial.println("Failed to open file for writing");
    return;
  }
  file.println(ssid);
  file.println(password);
  file.close();
}



void loadCredentials() {
  File file = SPIFFS.open("/wifi_cred.txt", "r");
  if (!file) {
    Serial.println("No saved credentials");
    return;
  }
  ssid = file.readStringUntil('\n');
  password = file.readStringUntil('\n');
  ssid.trim();
  password.trim();
  file.close();
}

void saveArea(float area){
   File file = SPIFFS.open("/Area.txt", "w");
  if (!file) {
    Serial.println("Failed to open file for writing");
    return;
  }
  file.println(area);
  file.close();
}

void loadarea(){
   File file = SPIFFS.open("/Area.txt", "r");
  if (!file) {
    Serial.println("No saved credentials");
    return;
  }
  area = file.read();
  inlet_area =area;
  file.close();
}

void startAPMode() {
  WiFi.mode(WIFI_AP);
  WiFi.softAPConfig(apIP, apIP, IPAddress(255, 255, 255, 0));
  WiFi.softAP(AP_SSID, AP_PASSWORD);

  // Start DNS server
  dnsServer.start(DNS_PORT, "*", apIP);

  // Configure web server
  webServer.on("/", handleRoot);
  webServer.on("/save", handleSave);
  webServer.onNotFound([]() {
    webServer.sendHeader("Location", String("http://") + apIP.toString(), true);
    webServer.send(302, "text/plain", "");
  });

  webServer.begin();
  Serial.println("HTTP server started");
  Serial.print("AP IP address: ");
  Serial.println(apIP);
}

void setup() {
  Serial.begin(115200);
  
  // Initialize SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("SPIFFS initialization failed!");
    return;
  }

  // Try to load saved credentials
  loadCredentials();
  loadarea();
  
  if (ssid.length() > 0 && password.length() > 0) {
    // Try to connect with saved credentials
    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid.c_str(), password.c_str());
    
    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 20) {
      delay(500);
      Serial.print(".");
      attempts++;
    }
  }
  
  if (WiFi.status() != WL_CONNECTED) {
    startAPMode();
  }
  
  Wire.begin();
  setupRTC();
  setupSD();
  createOrOpenFile();
  AH10_init();
  
  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  // herin's change comment this line
  // pinMode(ANEMOMETER, INPUT_PULLUP);
  // pinMode(PROXIMITY, INPUT_PULLUP);
  // attachInterrupt(digitalPinToInterrupt(ANEMOMETER), countPulse_anemometer, RISING);
  // attachInterrupt(digitalPinToInterrupt(PROXIMITY), countPulse_proximity, RISING);
  
  // xTaskCreatePinnedToCore(
  //   calculateRPM,
  //   "RPM Calculation",
  //   10000,
  //   NULL,
  //   1,
  //   &rpmTaskHandle,
  //   0
  // );
}

void loop() {
  if (WiFi.status() != WL_CONNECTED) {
    dnsServer.processNextRequest();
    webServer.handleClient();
  } else {
    DateTime now = rtc.now();
    ArduinoCloud.update();
    
    voltage = pzem.voltage();
    current = pzem.current();
    power = pzem.power();
    energy = pzem.energy();
    pF = pzem.pf();
    //temp_cfm = (windspeed * 51);
    // herin's change comment this line
    // air_Flow_Volume = windspeed*inlet_area;//in CFM for CMS = windspeed*0.000471947;

    Serial.print("windspeed : ");
    Serial.print("\t");
    Serial.print(windspeed);
    Serial.print("CFM : ");
    Serial.print("\t");
    // Serial.println(air_Flow_Volume); // herin's change comment this line
    
    readAHT10(&temperature, &humidity);
    
    if (millis() - lastOperationalCheck >= 1000) {
      if (current > 0.1) {
        operationalSeconds++;
        if (operationalSeconds >= 60) {
          operatioanl_time++;
          operationalSeconds = 0;
        }
      }
      lastOperationalCheck = millis();
    }
    
    if (millis() - lastLogTime >= 200) {
      lastLogTime = millis();
    }
    
    if (now.hour() == 23 && now.minute() == 59 && (now.second() >= 57 || now.second() <= 59)) {
      delay(1000);
      pzem.resetEnergy();
      totalEnergy = 0;
      operatioanl_time = 0;
      createOrOpenFile();
    }
  }
}
void onAreaChange()  {
  inlet_area = area;
  Serial.print("area");
  Serial.print("\t");
  Serial.println(inlet_area);
  saveArea(inlet_area);
  
  // Add your code here to act upon Area change
}






